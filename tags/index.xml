<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on Jack Greenberg</title><link>https://blog.jackgreenberg.co/tags/</link><description>Recent content in Tags on Jack Greenberg</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Mar 2022 18:00:00 -0700</lastBuildDate><atom:link href="https://blog.jackgreenberg.co/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>Embedded Rust From Embedded C: Peripherals</title><link>https://blog.jackgreenberg.co/posts/embedded-rust-from-embedded-c/</link><pubDate>Tue, 20 Sep 2022 17:09:37 +0200</pubDate><guid>https://blog.jackgreenberg.co/posts/embedded-rust-from-embedded-c/</guid><description>As an embedded C developer, I have become entrenched in the ways of the language. Things like using structs to access registers or opaque pointers for passing data around1. Rust provides a whole new memory model that makes writing any program safer at no extra cost. In the next few posts we&amp;rsquo;ll explore some of the patterns that make embedded Rust special and compare them to how things are done in C.</description></item></channel></rss>